name: 🚀 Multi-Environment Terraform Deployment 
on:
    push:
        branches: [ main, develop, prod ]
        paths:
        - 'environments/**'
        - 'modules/**'
      
    pull_request:
        branches: [ main, prod ]
        paths:
        - 'environments/**'
        - 'modules/**'
        
    workflow_dispatch:
        inputs:
            environment:
                description: 'Choose environment to deploy'
                required: true 
                default: 'dev'
                type: choice
                options:
                    - dev 
                    - staging
                    - prod
env:
  TF_VERSION: "1.12.2"
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
    setup:
        name: 🎯 Setup Environment
        runs-on: ubuntu-latest
        outputs:
            environment: ${{ steps.env.outputs.environment }}
            working_dir: ${{ steps.env.outputs.working_dir }}
            needs_approval: ${{ steps.env.outputs.needs_approval }}
        steps:
            - name: 🎯 Determine Environment
              id: env
              run: |
                if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    ENV="${{ github.event.inputs.environment }}"
                elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
                    ENV="dev"
                elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
                    ENV="staging"
                elif [ "${{ github.ref }}" = "refs/heads/prod" ]; then
                    ENV="prod"
                else
                    ENV="dev"
                fi
                
                echo "environment=$ENV" >> $GITHUB_OUTPUT
                echo "working_dir=environments/$ENV" >> $GITHUB_OUTPUT
                
                if [ "$ENV" = "dev" ]; then
                    echo "needs_approval=false" >> $GITHUB_OUTPUT
                else
                    echo "needs_approval=true" >> $GITHUB_OUTPUT
                fi
    # Job 1: Validation and Planning
    validate-and-plan:
        name: 🔍 Validate & Plan  (${{ needs.setup.outputs.environment }})
        runs-on: ubuntu-latest
        needs: setup
        environment:
            name: ${{ needs.setup.outputs.environment }}

        steps:
            - name: 📥 Checkout Code
              uses: actions/checkout@v4
            
            - name: 🔧 Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: ${{ env.TF_VERSION }}

            - name: 🔐 Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
               aws-region: ${{ secrets.AWS_REGION }}

            - name: 🎨 Terraform Format Check
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform fmt -check -recursive
            
            - name: ✅ Terraform Init
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform init

            - name: 🔍 Terraform Validate
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform validate

            - name: 🔓 Force Unlock State (if needed)
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: |
                # Try to unlock any stuck locks from previous cancelled runs
                terraform force-unlock -force 007ca5e1-8b12-2be3-4553-50b15b282019 || true
              continue-on-error: true

            - name: 📋 Terraform Plan
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform plan -out=tfplan

            - name: 💾 Save Plan Artifact
              
              uses: actions/upload-artifact@v4
              with:
                name: terraform-plan-${{ needs.setup.outputs.environment }}
                path: ${{ needs.setup.outputs.working_dir }}/tfplan
    approval:
        name: 🚪 Deployment Approval (${{ needs.setup.outputs.environment }})
        runs-on: ubuntu-latest
        needs: [setup, validate-and-plan]
        if: needs.setup.outputs.needs_approval == 'true'
        environment: 
            name: ${{ needs.setup.outputs.environment }}
            url: https://console.aws.amazon.com
        steps:
            - name: 🎯 Manual Approval Required
              run: |
                echo "Infrastructure plan is ready for deployment"
                echo "Review the plan in the previous job before approving"
    deploy:
        name: 🚀 Deploy to ${{ needs.setup.outputs.environment }}
        runs-on: ubuntu-latest
        needs: [setup, validate-and-plan, approval]
        if: always() && needs.validate-and-plan.result == 'success' && (needs.setup.outputs.needs_approval == 'false' || needs.approval.result == 'success')
        environment: ${{ needs.setup.outputs.environment }}

        steps:
            - name: 📥 Checkout Code
              uses: actions/checkout@v4

            - name: 🔧 Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: ${{ env.TF_VERSION }}

            - name: 🔐 Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                    aws-region: ${{ secrets.AWS_REGION }}

            - name: 🔓 Clear Stuck Locks
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: |
                # Try to get lock info and unlock if it's from a cancelled CI run
                LOCK_INFO=$(terraform force-unlock -help 2>&1 || true)
                # If there's a stuck lock from a runner (CI), unlock it
                terraform plan -lock=false -refresh=false -detailed-exitcode > /dev/null 2>&1 || {
                  echo "Found stuck lock, attempting auto-unlock..."
                  terraform force-unlock -force fedf47c0-4e09-2b40-3ac4-6b3c8020288a || true
                }
              continue-on-error: true

            - name: 💾 Download Plan Artifact
              uses: actions/download-artifact@v4
              with:
                name: terraform-plan-${{ needs.setup.outputs.environment }}
                path: ${{ needs.setup.outputs.working_dir }}

            - name: ✅ Terraform Init
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform init

            - name: 🚀 Apply Infrastructure
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform apply tfplan

            - name: ⏳ Wait Before Destroy
              run: sleep 30  # Give resources time to fully initialize

            - name: 🧪 Test Infrastructure (Optional)
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: |
                echo "Infrastructure deployed successfully!"
                echo "Add any basic tests here..."
                # terraform output
            
            - name: 🗑️ Destroy Infrastructure (Dev & Staging Only)
              if: needs.setup.outputs.environment == 'dev' || needs.setup.outputs.environment == 'staging'
              working-directory: ${{ needs.setup.outputs.working_dir }}
              run: terraform destroy -auto-approve 